/**
 * 解题思路
 * 
 * 求任意两点的连线 y=kx+b; 即求 k 和 b; 
 * 遍历所有的线，求得每条线的点序列；
 * 统计每个线的点数量
 * 
 * 
 */

var maxPoints = function (points) {
    if (points.length < 3) {
        return points.length;
    }
    var lines = [];
    for (var i = 0; i < points.length; i++) {

        for (var j = 0; j < points.length; j++) {

            if (i === j) {
                continue;
            }

            if (points[i].x === points[j].x) {
                var line = {
                    k: Infinity,
                    b: points[i].x
                };

                if (!existLine(line, lines)) {
                    lines.push(line);
                }

            } else {
                var k = (points[i].y - points[j].y) / (points[i].x - points[j].x);

                if (points[i].y === points[j].y) {
                    k = 0;
                }

                var b = points[j].y - k * points[j].x;

                var line = {
                    k: k,
                    b: b
                };

                if (!existLine(line, lines)) {
                    lines.push(line);
                    //  console.log('point:', i, j);
                    //  console.log('point:', points[i], points[j], line);
                }
            }
        }
    }

    console.log('length:', lines.length);
    console.log('line:', lines[0]);

    var counts = lines.map((line, index) => {
        return points.filter((point) => {
            if (line.k === Infinity && point.x === line.b) {
                return true;
            }
            let distance = point.x * line.k + line.b - point.y;
            if (index === 0) {
                console.log('distance', line, Math.abs(distance) > 0.0000000000001, distance);
            }
            return Math.abs(distance) < 0.00000000001;
        }).length;
    });
    return Math.max(...counts);
};

function existLine(line, lines) {
    return lines.findIndex((l) => {
        return l.k === line.k && Math.abs(l.b - line.b) < 0.00000000001;
    }) > -1;
}

function Point(x, y) {
    this.x = x;
    this.y = y;
}

const result = maxPoints(
    [
        [-240, -657],
        [-27, -188],
        [-616, -247],
        [-264, -311],
        [-352, -393],
        [-270, -748],
        [3, 4],
        [-308, -87],
        [150, 526],
        [0, -13],
        [-7, -40],
        [-3, -10],
        [-531, -892],
        [-88, -147],
        [4, -3],
        [-873, -555],
        [-582, -360],
        [-539, -207],
        [-118, -206],
        [970, 680],
        [-231, -47],
        [352, 263],
        [510, 143],
        [295, 480],
        [-590, -990],
        [-236, -402],
        [308, 233],
        [-60, -111],
        [462, 313],
        [-270, -748],
        [-352, -393],
        [-35, -148],
        [-7, -40],
        [440, 345],
        [388, 290],
        [270, 890],
        [10, -7],
        [60, 253],
        [-531, -892],
        [388, 290],
        [-388, -230],
        [340, 85],
        [0, -13],
        [770, 473],
        [0, 73],
        [873, 615],
        [-42, -175],
        [-6, -8],
        [49, 176],
        [308, 222],
        [170, 27],
        [-485, -295],
        [170, 27],
        [510, 143],
        [-18, -156],
        [-63, -316],
        [-28, -121],
        [396, 304],
        [472, 774],
        [-14, -67],
        [-5, 7],
        [-485, -295],
        [118, 186],
        [-154, -7],
        [-7, -40],
        [-97, -35],
        [4, -9],
        [-18, -156],
        [0, -31],
        [-9, -124],
        [-300, -839],
        [-308, -352],
        [-425, -176],
        [-194, -100],
        [873, 615],
        [413, 676],
        [-90, -202],
        [220, 140],
        [77, 113],
        [-236, -402],
        [-9, -124],
        [63, 230],
        [-255, -118],
        [472, 774],
        [-56, -229],
        [90, 228],
        [3, -8],
        [81, 196],
        [970, 680],
        [485, 355],
        [-354, -598],
        [-385, -127],
        [-2, 7],
        [531, 872],
        [-680, -263],
        [-21, -94],
        [-118, -206],
        [616, 393],
        [291, 225],
        [-240, -657],
        [-5, -4],
        [1, -2],
        [485, 355],
        [231, 193],
        [-88, -147],
        [-291, -165],
        [-176, -229],
        [154, 153],
        [-970, -620],
        [-77, 33],
        [-60, -111],
        [30, 162],
        [-18, -156],
        [425, 114],
        [-177, -304],
        [-21, -94],
        [-10, 9],
        [-352, -393],
        [154, 153],
        [-220, -270],
        [44, -24],
        [-291, -165],
        [0, -31],
        [240, 799],
        [-5, -9],
        [-70, -283],
        [-176, -229],
        [3, 8],
        [-679, -425],
        [-385, -127],
        [396, 304],
        [-308, -352],
        [-595, -234],
        [42, 149],
        [-220, -270],
        [385, 273],
        [-308, -87],
        [-54, -284],
        [680, 201],
        [-154, -7],
        [-440, -475],
        [-531, -892],
        [-42, -175],
        [770, 473],
        [118, 186],
        [-385, -127],
        [154, 153],
        [56, 203],
        [-616, -247]
    ].map(p => {
        return new Point(p[0], p[1])
    }));

console.log('result:', result)
